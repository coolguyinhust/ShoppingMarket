信息系统的开发架构
本项目采用的是MVC实现的。
下来分别介绍三层架构和mvc

一、三层架构：(宏观意义上)

N层结构 = MVC层 + Service/Manager/Logic层 + DAO层

一个常见的J2EE项目：
XXX.jsp (V)		//用户在jsp页面上操作
CartServlet.java (C)   //控制层(服务器端)解析用户的意图,比如将某件商品从购物车中删除;
User.java , Cart.java , Item.java (M) //C实际上调用的是M里面的,M里面包含了Service层方法(???)
UserDao.java (DAO层)
ItemsDAO.java (DAO层)



客户-------显示层-------业务层---------数据层---------数据库

（客户：客户层就是客户端，简单的来说就是浏览器。）

1.界面层：JSP/Servlet，用于给浏览器显示。

2.业务层：对于数据层的原子操作进行整合。

3.数据访问层：对于数据库进行的原子操作，增加、删除等；

DAO(Data Access Object)：
	DAO应用在数据层那块,用于访问数据库，对数据库进行操作的类。
	DAO层主要是做数据持久层的工作，负责与数据库进行联络的一些任务都封装在此，
	DAO层的设计首先是设计DAO的接口，然后在Spring的配置文件中定义此接口的实现类，
	然后就可在模块中调用此接口来进行数据业务的处理，而不用关心此接口的具体实现类是哪个类，
	显得结构非常清晰，DAO层的数据源配置，以及有关数据库连接的参数都在Spring的配置文件中进行配置。   

二、MVC模型实现（Jsp+Servlet+JavaBean)

client ----interact------>Controller-----manipulate---->Model
 |                                                      |
 |                                                      |
 |                                                      |
 |---->see--------View------------<-----update----------|

与三级架构的区别：

关注的重点不同:
MVC 关注的重点在于表现层的代码组织方式，通过降低代码间的耦合度，使代码更改维护。
3-tires 关注系统的分布，便于提升系统性能，增加系统功能。

拓扑结构不同:
MVC 是可以三角结构，视图向控制器发送更新，控制器更新模型，视图可以直接从模型更新。
3-tires 一定是是线性结构，展示层即客户端不能直接与数据层通信，
也就是说客户端展示层与数据层的通信必须经过中间层即业务层。


MVC指的是presentation层面的模式，
多层架构更多是指整个系统的设计方法，
而通常presentation只是多层中的一层。

创建购物车类，编写Servlet调用购物车类，创建页面层。